{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2ae9a89f",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:42.662512Z",
     "iopub.status.busy": "2025-07-15T14:26:42.662080Z",
     "iopub.status.idle": "2025-07-15T14:26:46.492323Z",
     "shell.execute_reply": "2025-07-15T14:26:46.491349Z"
    },
    "papermill": {
     "duration": 3.840518,
     "end_time": "2025-07-15T14:26:46.493947",
     "exception": false,
     "start_time": "2025-07-15T14:26:42.653429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f7962c00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:46.508955Z",
     "iopub.status.busy": "2025-07-15T14:26:46.508499Z",
     "iopub.status.idle": "2025-07-15T14:26:46.512957Z",
     "shell.execute_reply": "2025-07-15T14:26:46.512176Z"
    },
    "papermill": {
     "duration": 0.013295,
     "end_time": "2025-07-15T14:26:46.514375",
     "exception": false,
     "start_time": "2025-07-15T14:26:46.501080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f63714f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:46.528765Z",
     "iopub.status.busy": "2025-07-15T14:26:46.528446Z",
     "iopub.status.idle": "2025-07-15T14:26:46.930689Z",
     "shell.execute_reply": "2025-07-15T14:26:46.929655Z"
    },
    "papermill": {
     "duration": 0.411334,
     "end_time": "2025-07-15T14:26:46.932406",
     "exception": false,
     "start_time": "2025-07-15T14:26:46.521072",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# load dataset\n",
    "\n",
    "train=pd.read_csv(\"/kaggle/input/mlp-term-2-2025-kaggle-assignment-2/train.csv\")\n",
    "test=pd.read_csv(\"/kaggle/input/mlp-term-2-2025-kaggle-assignment-2/test.csv\")\n",
    "ss=pd.read_csv(\"/kaggle/input/mlp-term-2-2025-kaggle-assignment-2/sample_submission.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7eb81100",
   "metadata": {
    "papermill": {
     "duration": 0.00674,
     "end_time": "2025-07-15T14:26:46.945704",
     "exception": false,
     "start_time": "2025-07-15T14:26:46.938964",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Finding info about dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "80557cac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:46.959543Z",
     "iopub.status.busy": "2025-07-15T14:26:46.959174Z",
     "iopub.status.idle": "2025-07-15T14:26:46.965807Z",
     "shell.execute_reply": "2025-07-15T14:26:46.965003Z"
    },
    "papermill": {
     "duration": 0.015325,
     "end_time": "2025-07-15T14:26:46.967224",
     "exception": false,
     "start_time": "2025-07-15T14:26:46.951899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(90000, 14)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2a2a9c88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:46.981524Z",
     "iopub.status.busy": "2025-07-15T14:26:46.981162Z",
     "iopub.status.idle": "2025-07-15T14:26:47.027236Z",
     "shell.execute_reply": "2025-07-15T14:26:47.026210Z"
    },
    "papermill": {
     "duration": 0.054947,
     "end_time": "2025-07-15T14:26:47.028723",
     "exception": false,
     "start_time": "2025-07-15T14:26:46.973776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 90000 entries, 0 to 89999\n",
      "Data columns (total 14 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   id                90000 non-null  int64  \n",
      " 1   customer_id       90000 non-null  int64  \n",
      " 2   last_name         90000 non-null  object \n",
      " 3   credit_score      80444 non-null  float64\n",
      " 4   country           83979 non-null  object \n",
      " 5   gender            90000 non-null  object \n",
      " 6   age               90000 non-null  float64\n",
      " 7   tenure            90000 non-null  int64  \n",
      " 8   acc_balance       82743 non-null  float64\n",
      " 9   prod_count        85137 non-null  float64\n",
      " 10  has_card          90000 non-null  float64\n",
      " 11  is_active         90000 non-null  float64\n",
      " 12  estimated_salary  90000 non-null  float64\n",
      " 13  exit_status       90000 non-null  int64  \n",
      "dtypes: float64(7), int64(4), object(3)\n",
      "memory usage: 9.6+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f281522f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:47.043937Z",
     "iopub.status.busy": "2025-07-15T14:26:47.043154Z",
     "iopub.status.idle": "2025-07-15T14:26:47.069983Z",
     "shell.execute_reply": "2025-07-15T14:26:47.069173Z"
    },
    "papermill": {
     "duration": 0.036036,
     "end_time": "2025-07-15T14:26:47.071575",
     "exception": false,
     "start_time": "2025-07-15T14:26:47.035539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>last_name</th>\n",
       "      <th>credit_score</th>\n",
       "      <th>country</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>tenure</th>\n",
       "      <th>acc_balance</th>\n",
       "      <th>prod_count</th>\n",
       "      <th>has_card</th>\n",
       "      <th>is_active</th>\n",
       "      <th>estimated_salary</th>\n",
       "      <th>exit_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>15788291</td>\n",
       "      <td>Iredale</td>\n",
       "      <td>559.0</td>\n",
       "      <td>France</td>\n",
       "      <td>Male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>149989.39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>67622.46</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>15642816</td>\n",
       "      <td>Hs?</td>\n",
       "      <td>694.0</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>37.0</td>\n",
       "      <td>7</td>\n",
       "      <td>114510.35</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>182797.86</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>15632272</td>\n",
       "      <td>T'ien</td>\n",
       "      <td>585.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Female</td>\n",
       "      <td>45.0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>170338.35</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>15685826</td>\n",
       "      <td>Hightower</td>\n",
       "      <td>589.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Male</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>166082.18</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>166476.46</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>15658032</td>\n",
       "      <td>Hopkins</td>\n",
       "      <td>701.0</td>\n",
       "      <td>France</td>\n",
       "      <td>Male</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>82526.92</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  customer_id  last_name  credit_score country  gender   age  tenure  \\\n",
       "0   0     15788291    Iredale         559.0  France    Male  28.0       1   \n",
       "1   1     15642816        Hs?         694.0  France  Female  37.0       7   \n",
       "2   2     15632272      T'ien         585.0     NaN  Female  45.0       8   \n",
       "3   3     15685826  Hightower         589.0   Spain    Male  25.0       0   \n",
       "4   4     15658032    Hopkins         701.0  France    Male  39.0       2   \n",
       "\n",
       "   acc_balance  prod_count  has_card  is_active  estimated_salary  exit_status  \n",
       "0    149989.39         1.0       1.0        1.0          67622.46            0  \n",
       "1    114510.35         2.0       0.0        0.0         182797.86            0  \n",
       "2          NaN         2.0       1.0        1.0         170338.35            0  \n",
       "3    166082.18         1.0       1.0        1.0         166476.46            0  \n",
       "4         0.00         2.0       1.0        0.0          82526.92            0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f3bea0b",
   "metadata": {
    "papermill": {
     "duration": 0.006625,
     "end_time": "2025-07-15T14:26:47.085324",
     "exception": false,
     "start_time": "2025-07-15T14:26:47.078699",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Describing Numeric Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a645b933",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:47.100389Z",
     "iopub.status.busy": "2025-07-15T14:26:47.100057Z",
     "iopub.status.idle": "2025-07-15T14:26:47.173061Z",
     "shell.execute_reply": "2025-07-15T14:26:47.172171Z"
    },
    "papermill": {
     "duration": 0.082627,
     "end_time": "2025-07-15T14:26:47.174594",
     "exception": false,
     "start_time": "2025-07-15T14:26:47.091967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>credit_score</th>\n",
       "      <th>age</th>\n",
       "      <th>tenure</th>\n",
       "      <th>acc_balance</th>\n",
       "      <th>prod_count</th>\n",
       "      <th>has_card</th>\n",
       "      <th>is_active</th>\n",
       "      <th>estimated_salary</th>\n",
       "      <th>exit_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>90000.000000</td>\n",
       "      <td>9.000000e+04</td>\n",
       "      <td>80444.000000</td>\n",
       "      <td>90000.000000</td>\n",
       "      <td>90000.000000</td>\n",
       "      <td>82743.000000</td>\n",
       "      <td>85137.000000</td>\n",
       "      <td>90000.000000</td>\n",
       "      <td>90000.000000</td>\n",
       "      <td>90000.000000</td>\n",
       "      <td>90000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>44999.500000</td>\n",
       "      <td>1.569209e+07</td>\n",
       "      <td>656.497054</td>\n",
       "      <td>38.119533</td>\n",
       "      <td>5.017022</td>\n",
       "      <td>55456.732147</td>\n",
       "      <td>1.552932</td>\n",
       "      <td>0.754289</td>\n",
       "      <td>0.497178</td>\n",
       "      <td>112394.659679</td>\n",
       "      <td>0.211600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>25980.906451</td>\n",
       "      <td>7.129796e+04</td>\n",
       "      <td>80.016856</td>\n",
       "      <td>8.855203</td>\n",
       "      <td>2.804813</td>\n",
       "      <td>62788.474236</td>\n",
       "      <td>0.548011</td>\n",
       "      <td>0.430510</td>\n",
       "      <td>0.499995</td>\n",
       "      <td>50360.440702</td>\n",
       "      <td>0.408445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.556570e+07</td>\n",
       "      <td>350.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>11.580000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>22499.750000</td>\n",
       "      <td>1.563361e+07</td>\n",
       "      <td>597.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>74430.360000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>44999.500000</td>\n",
       "      <td>1.569016e+07</td>\n",
       "      <td>659.000000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>117505.070000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>67499.250000</td>\n",
       "      <td>1.575674e+07</td>\n",
       "      <td>710.000000</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>119825.750000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>154874.787500</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>89999.000000</td>\n",
       "      <td>1.581569e+07</td>\n",
       "      <td>850.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>250898.090000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>199992.480000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id   customer_id  credit_score           age        tenure  \\\n",
       "count  90000.000000  9.000000e+04  80444.000000  90000.000000  90000.000000   \n",
       "mean   44999.500000  1.569209e+07    656.497054     38.119533      5.017022   \n",
       "std    25980.906451  7.129796e+04     80.016856      8.855203      2.804813   \n",
       "min        0.000000  1.556570e+07    350.000000     18.000000      0.000000   \n",
       "25%    22499.750000  1.563361e+07    597.000000     32.000000      3.000000   \n",
       "50%    44999.500000  1.569016e+07    659.000000     37.000000      5.000000   \n",
       "75%    67499.250000  1.575674e+07    710.000000     42.000000      7.000000   \n",
       "max    89999.000000  1.581569e+07    850.000000     92.000000     10.000000   \n",
       "\n",
       "         acc_balance    prod_count      has_card     is_active  \\\n",
       "count   82743.000000  85137.000000  90000.000000  90000.000000   \n",
       "mean    55456.732147      1.552932      0.754289      0.497178   \n",
       "std     62788.474236      0.548011      0.430510      0.499995   \n",
       "min         0.000000      1.000000      0.000000      0.000000   \n",
       "25%         0.000000      1.000000      1.000000      0.000000   \n",
       "50%         0.000000      2.000000      1.000000      0.000000   \n",
       "75%    119825.750000      2.000000      1.000000      1.000000   \n",
       "max    250898.090000      4.000000      1.000000      1.000000   \n",
       "\n",
       "       estimated_salary   exit_status  \n",
       "count      90000.000000  90000.000000  \n",
       "mean      112394.659679      0.211600  \n",
       "std        50360.440702      0.408445  \n",
       "min           11.580000      0.000000  \n",
       "25%        74430.360000      0.000000  \n",
       "50%       117505.070000      0.000000  \n",
       "75%       154874.787500      0.000000  \n",
       "max       199992.480000      1.000000  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "df4aee3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:47.189853Z",
     "iopub.status.busy": "2025-07-15T14:26:47.189570Z",
     "iopub.status.idle": "2025-07-15T14:26:47.230284Z",
     "shell.execute_reply": "2025-07-15T14:26:47.229404Z"
    },
    "papermill": {
     "duration": 0.050265,
     "end_time": "2025-07-15T14:26:47.231863",
     "exception": false,
     "start_time": "2025-07-15T14:26:47.181598",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>credit_score</th>\n",
       "      <th>age</th>\n",
       "      <th>tenure</th>\n",
       "      <th>acc_balance</th>\n",
       "      <th>prod_count</th>\n",
       "      <th>has_card</th>\n",
       "      <th>is_active</th>\n",
       "      <th>estimated_salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>30000.000000</td>\n",
       "      <td>3.000000e+04</td>\n",
       "      <td>26815.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>24749.000000</td>\n",
       "      <td>28283.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>14999.500000</td>\n",
       "      <td>1.569190e+07</td>\n",
       "      <td>656.406041</td>\n",
       "      <td>38.118100</td>\n",
       "      <td>5.024167</td>\n",
       "      <td>55444.225343</td>\n",
       "      <td>1.553972</td>\n",
       "      <td>0.757833</td>\n",
       "      <td>0.495200</td>\n",
       "      <td>112664.246065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8660.398374</td>\n",
       "      <td>7.192854e+04</td>\n",
       "      <td>80.310093</td>\n",
       "      <td>8.873345</td>\n",
       "      <td>2.809931</td>\n",
       "      <td>62736.404013</td>\n",
       "      <td>0.545386</td>\n",
       "      <td>0.428402</td>\n",
       "      <td>0.499985</td>\n",
       "      <td>50064.348532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.556580e+07</td>\n",
       "      <td>350.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>11.580000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7499.750000</td>\n",
       "      <td>1.563220e+07</td>\n",
       "      <td>597.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>74837.967500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>14999.500000</td>\n",
       "      <td>1.569021e+07</td>\n",
       "      <td>659.000000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>118216.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>22499.250000</td>\n",
       "      <td>1.575758e+07</td>\n",
       "      <td>710.000000</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>119688.810000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>154920.805000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>29999.000000</td>\n",
       "      <td>1.581569e+07</td>\n",
       "      <td>850.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>250898.090000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>199992.480000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id   customer_id  credit_score           age        tenure  \\\n",
       "count  30000.000000  3.000000e+04  26815.000000  30000.000000  30000.000000   \n",
       "mean   14999.500000  1.569190e+07    656.406041     38.118100      5.024167   \n",
       "std     8660.398374  7.192854e+04     80.310093      8.873345      2.809931   \n",
       "min        0.000000  1.556580e+07    350.000000     18.000000      0.000000   \n",
       "25%     7499.750000  1.563220e+07    597.000000     32.000000      3.000000   \n",
       "50%    14999.500000  1.569021e+07    659.000000     37.000000      5.000000   \n",
       "75%    22499.250000  1.575758e+07    710.000000     42.000000      7.000000   \n",
       "max    29999.000000  1.581569e+07    850.000000     92.000000     10.000000   \n",
       "\n",
       "         acc_balance    prod_count      has_card     is_active  \\\n",
       "count   24749.000000  28283.000000  30000.000000  30000.000000   \n",
       "mean    55444.225343      1.553972      0.757833      0.495200   \n",
       "std     62736.404013      0.545386      0.428402      0.499985   \n",
       "min         0.000000      1.000000      0.000000      0.000000   \n",
       "25%         0.000000      1.000000      1.000000      0.000000   \n",
       "50%         0.000000      2.000000      1.000000      0.000000   \n",
       "75%    119688.810000      2.000000      1.000000      1.000000   \n",
       "max    250898.090000      4.000000      1.000000      1.000000   \n",
       "\n",
       "       estimated_salary  \n",
       "count      30000.000000  \n",
       "mean      112664.246065  \n",
       "std        50064.348532  \n",
       "min           11.580000  \n",
       "25%        74837.967500  \n",
       "50%       118216.000000  \n",
       "75%       154920.805000  \n",
       "max       199992.480000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b12cd215",
   "metadata": {
    "papermill": {
     "duration": 0.00706,
     "end_time": "2025-07-15T14:26:47.246274",
     "exception": false,
     "start_time": "2025-07-15T14:26:47.239214",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Identifying & Handling missing\n",
    "\n",
    "I've referred to [this](https://www.insidealgorithms.com/blog/missing-values) blog for making my decision for how to handle missing values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "68120f46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:47.261650Z",
     "iopub.status.busy": "2025-07-15T14:26:47.261343Z",
     "iopub.status.idle": "2025-07-15T14:26:47.288478Z",
     "shell.execute_reply": "2025-07-15T14:26:47.287392Z"
    },
    "papermill": {
     "duration": 0.03676,
     "end_time": "2025-07-15T14:26:47.290028",
     "exception": false,
     "start_time": "2025-07-15T14:26:47.253268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 90000 entries, 0 to 89999\n",
      "Data columns (total 14 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   id                90000 non-null  int64  \n",
      " 1   customer_id       90000 non-null  int64  \n",
      " 2   last_name         90000 non-null  object \n",
      " 3   credit_score      80444 non-null  float64\n",
      " 4   country           83979 non-null  object \n",
      " 5   gender            90000 non-null  object \n",
      " 6   age               90000 non-null  float64\n",
      " 7   tenure            90000 non-null  int64  \n",
      " 8   acc_balance       82743 non-null  float64\n",
      " 9   prod_count        85137 non-null  float64\n",
      " 10  has_card          90000 non-null  float64\n",
      " 11  is_active         90000 non-null  float64\n",
      " 12  estimated_salary  90000 non-null  float64\n",
      " 13  exit_status       90000 non-null  int64  \n",
      "dtypes: float64(7), int64(4), object(3)\n",
      "memory usage: 9.6+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fa22c576",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:47.307523Z",
     "iopub.status.busy": "2025-07-15T14:26:47.307217Z",
     "iopub.status.idle": "2025-07-15T14:26:47.315711Z",
     "shell.execute_reply": "2025-07-15T14:26:47.314938Z"
    },
    "papermill": {
     "duration": 0.019518,
     "end_time": "2025-07-15T14:26:47.317134",
     "exception": false,
     "start_time": "2025-07-15T14:26:47.297616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['France', nan, 'Spain', 'Germany'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['country'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "60d6f83d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:47.333501Z",
     "iopub.status.busy": "2025-07-15T14:26:47.332781Z",
     "iopub.status.idle": "2025-07-15T14:26:47.356354Z",
     "shell.execute_reply": "2025-07-15T14:26:47.355470Z"
    },
    "papermill": {
     "duration": 0.03328,
     "end_time": "2025-07-15T14:26:47.357861",
     "exception": false,
     "start_time": "2025-07-15T14:26:47.324581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                     0\n",
       "customer_id            0\n",
       "last_name              0\n",
       "credit_score        9556\n",
       "country             6021\n",
       "gender                 0\n",
       "age                    0\n",
       "tenure                 0\n",
       "acc_balance         7257\n",
       "prod_count          4863\n",
       "has_card               0\n",
       "is_active              0\n",
       "estimated_salary       0\n",
       "exit_status            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "aa440719",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:47.374639Z",
     "iopub.status.busy": "2025-07-15T14:26:47.373766Z",
     "iopub.status.idle": "2025-07-15T14:26:47.395530Z",
     "shell.execute_reply": "2025-07-15T14:26:47.394538Z"
    },
    "papermill": {
     "duration": 0.03196,
     "end_time": "2025-07-15T14:26:47.397359",
     "exception": false,
     "start_time": "2025-07-15T14:26:47.365399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = train.drop(columns=[\"exit_status\"]).copy()\n",
    "y_train = train[\"exit_status\"].copy()\n",
    "X_test = test.copy()\n",
    "if \"exit_status\" in X_test.columns:\n",
    "    X_test = X_test.drop(columns=[\"exit_status\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0ab944c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:47.414601Z",
     "iopub.status.busy": "2025-07-15T14:26:47.414286Z",
     "iopub.status.idle": "2025-07-15T14:26:48.160484Z",
     "shell.execute_reply": "2025-07-15T14:26:48.159591Z"
    },
    "papermill": {
     "duration": 0.757212,
     "end_time": "2025-07-15T14:26:48.162124",
     "exception": false,
     "start_time": "2025-07-15T14:26:47.404912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "\n",
    "numeric_mean_cols      = [\"credit_score\", \"prod_count\", \"acc_balance\"]\n",
    "categorical_country    = [\"country\"]\n",
    "\n",
    "mean_imputer = SimpleImputer(strategy='mean')\n",
    "country_imputer = SimpleImputer(strategy=\"constant\", fill_value=\"Unknown\")\n",
    "\n",
    "preprocess = ColumnTransformer(\n",
    "    transformers=[\n",
    "        (\"num_mean\",   mean_imputer,    numeric_mean_cols),\n",
    "        (\"cat_country\", country_imputer, categorical_country),\n",
    "    ],\n",
    "    remainder=\"passthrough\",\n",
    "    verbose_feature_names_out=False\n",
    ").set_output(transform=\"pandas\")\n",
    "\n",
    "preprocess.fit(X_train)          # fit only on train\n",
    "X_train = preprocess.transform(X_train)\n",
    "X_test  = preprocess.transform(X_test) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1d8c957a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:48.178528Z",
     "iopub.status.busy": "2025-07-15T14:26:48.177812Z",
     "iopub.status.idle": "2025-07-15T14:26:48.205309Z",
     "shell.execute_reply": "2025-07-15T14:26:48.204394Z"
    },
    "papermill": {
     "duration": 0.037165,
     "end_time": "2025-07-15T14:26:48.206786",
     "exception": false,
     "start_time": "2025-07-15T14:26:48.169621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values in train: 0 and test: 0\n"
     ]
    }
   ],
   "source": [
    "print(f\"Missing values in train: {X_train.isna().sum().sum()} and test: {X_test.isna().sum().sum()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b175663",
   "metadata": {
    "papermill": {
     "duration": 0.007268,
     "end_time": "2025-07-15T14:26:48.221725",
     "exception": false,
     "start_time": "2025-07-15T14:26:48.214457",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Handling duplicate values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "98059874",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:48.237827Z",
     "iopub.status.busy": "2025-07-15T14:26:48.237533Z",
     "iopub.status.idle": "2025-07-15T14:26:48.289371Z",
     "shell.execute_reply": "2025-07-15T14:26:48.288453Z"
    },
    "papermill": {
     "duration": 0.061888,
     "end_time": "2025-07-15T14:26:48.291011",
     "exception": false,
     "start_time": "2025-07-15T14:26:48.229123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4a31447a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:48.307535Z",
     "iopub.status.busy": "2025-07-15T14:26:48.307219Z",
     "iopub.status.idle": "2025-07-15T14:26:48.328766Z",
     "shell.execute_reply": "2025-07-15T14:26:48.327923Z"
    },
    "papermill": {
     "duration": 0.03156,
     "end_time": "2025-07-15T14:26:48.330284",
     "exception": false,
     "start_time": "2025-07-15T14:26:48.298724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.duplicated().sum()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "d5351ab4",
   "metadata": {
    "papermill": {
     "duration": 0.00793,
     "end_time": "2025-07-15T14:26:48.346249",
     "exception": false,
     "start_time": "2025-07-15T14:26:48.338319",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since there are no duplicate values in the dataset, we won't perform any operations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a1bd346",
   "metadata": {
    "papermill": {
     "duration": 0.008052,
     "end_time": "2025-07-15T14:26:48.362327",
     "exception": false,
     "start_time": "2025-07-15T14:26:48.354275",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Finding outliers and handling them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "752a31b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:48.379136Z",
     "iopub.status.busy": "2025-07-15T14:26:48.378789Z",
     "iopub.status.idle": "2025-07-15T14:26:48.403362Z",
     "shell.execute_reply": "2025-07-15T14:26:48.402297Z"
    },
    "papermill": {
     "duration": 0.034966,
     "end_time": "2025-07-15T14:26:48.404904",
     "exception": false,
     "start_time": "2025-07-15T14:26:48.369938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 90000 entries, 0 to 89999\n",
      "Data columns (total 13 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   credit_score      90000 non-null  float64\n",
      " 1   prod_count        90000 non-null  float64\n",
      " 2   acc_balance       90000 non-null  float64\n",
      " 3   country           90000 non-null  object \n",
      " 4   id                90000 non-null  int64  \n",
      " 5   customer_id       90000 non-null  int64  \n",
      " 6   last_name         90000 non-null  object \n",
      " 7   gender            90000 non-null  object \n",
      " 8   age               90000 non-null  float64\n",
      " 9   tenure            90000 non-null  int64  \n",
      " 10  has_card          90000 non-null  float64\n",
      " 11  is_active         90000 non-null  float64\n",
      " 12  estimated_salary  90000 non-null  float64\n",
      "dtypes: float64(7), int64(3), object(3)\n",
      "memory usage: 8.9+ MB\n"
     ]
    }
   ],
   "source": [
    "X_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0d20c7d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:48.421912Z",
     "iopub.status.busy": "2025-07-15T14:26:48.421606Z",
     "iopub.status.idle": "2025-07-15T14:26:48.458390Z",
     "shell.execute_reply": "2025-07-15T14:26:48.457444Z"
    },
    "papermill": {
     "duration": 0.047088,
     "end_time": "2025-07-15T14:26:48.460023",
     "exception": false,
     "start_time": "2025-07-15T14:26:48.412935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "num_cols = [\n",
    "    \"credit_score\",        \n",
    "    \"acc_balance\",         \n",
    "    \"prod_count\",          \n",
    "    \"age\",                 \n",
    "    \"tenure\",              \n",
    "    \"estimated_salary\"     \n",
    "]\n",
    "\n",
    "def flag_iqr_outliers(df: pd.DataFrame, cols, k=1.5):\n",
    "    \"\"\"\n",
    "    Returns a DataFrame of booleans: True where the value is an outlier.\n",
    "    \"\"\"\n",
    "    flags = pd.DataFrame(False, index=df.index, columns=cols)\n",
    "    for col in cols:\n",
    "        Q1 = df[col].quantile(0.25)\n",
    "        Q3 = df[col].quantile(0.75)\n",
    "        IQR = Q3 - Q1\n",
    "        lo, hi = Q1 - k * IQR, Q3 + k * IQR\n",
    "        flags[col] = (df[col] < lo) | (df[col] > hi)\n",
    "    return flags\n",
    "\n",
    "iqr_flags = flag_iqr_outliers(X_train, num_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "baa098d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:48.477576Z",
     "iopub.status.busy": "2025-07-15T14:26:48.476936Z",
     "iopub.status.idle": "2025-07-15T14:26:49.531112Z",
     "shell.execute_reply": "2025-07-15T14:26:49.530186Z"
    },
    "papermill": {
     "duration": 1.064918,
     "end_time": "2025-07-15T14:26:49.532765",
     "exception": false,
     "start_time": "2025-07-15T14:26:48.467847",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def box_violin(df, col, logscale=False):\n",
    "    series = np.log1p(df[col]) if logscale else df[col]\n",
    "    fig, axes = plt.subplots(1, 2, figsize=(10, 4))\n",
    "    sns.boxplot(y=series, ax=axes[0])\n",
    "    axes[0].set_title(f\"Box plot – {col}{' (log1p)' if logscale else ''}\")\n",
    "    sns.violinplot(y=series, ax=axes[1])\n",
    "    axes[1].set_title(f\"Violin plot – {col}{' (log1p)' if logscale else ''}\")\n",
    "    plt.show()\n",
    "\n",
    "for c in [\"acc_balance\", \"estimated_salary\"]:\n",
    "    box_violin(X_train, c, logscale=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8e99326",
   "metadata": {
    "papermill": {
     "duration": 0.071715,
     "end_time": "2025-07-15T14:26:49.614243",
     "exception": false,
     "start_time": "2025-07-15T14:26:49.542528",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Dealing with outliers\n",
    "\n",
    "When we graphed the money variables (acc_balance and estimated_salary), two patterns jumped out. First, many customers keep exactly ₹0 in their accounts, while a tiny fraction hold very large sums. Second, salaries cluster in a normal-looking band but include a sprinkling of unrealistically low figures—entries that are more likely data‑entry mistakes than genuine paychecks.\n",
    "\n",
    "We handled each issue in a focused way. For balances, we created a simple flag to mark every zero-balance account so the model can treat that group separately, and we set a reasonable ceiling on only the top half‑percent of balances so a single millionaire doesn’t overpower the scale. For salaries, we lifted anything below the bottom one‑percent threshold up to that cutoff, preventing bogus “too‑low‑to‑be-true” numbers from pulling results downward. After that, we applied a natural‑log transform to both columns to tame the range and make subtle differences easier for the model to read.\n",
    "\n",
    "In short: we preserved meaningful extremes (like zero balances and high earners) and trimmed only the values that looked like noise, ensuring the churn model learns from realistic data rather than outlier artifacts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bde08141",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:49.634153Z",
     "iopub.status.busy": "2025-07-15T14:26:49.633801Z",
     "iopub.status.idle": "2025-07-15T14:26:49.670887Z",
     "shell.execute_reply": "2025-07-15T14:26:49.669676Z"
    },
    "papermill": {
     "duration": 0.049123,
     "end_time": "2025-07-15T14:26:49.672553",
     "exception": false,
     "start_time": "2025-07-15T14:26:49.623430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   credit_score  prod_count  country  id  customer_id  last_name  gender  \\\n",
      "0         559.0         1.0   France   0     15788291    Iredale    Male   \n",
      "1         694.0         2.0   France   1     15642816        Hs?  Female   \n",
      "2         585.0         2.0  Unknown   2     15632272      T'ien  Female   \n",
      "3         589.0         1.0    Spain   3     15685826  Hightower    Male   \n",
      "4         701.0         2.0   France   4     15658032    Hopkins    Male   \n",
      "\n",
      "    age  tenure  has_card  is_active  zero_bal_flag  acc_balance_log  \\\n",
      "0  28.0       1       1.0        1.0              0        11.918327   \n",
      "1  37.0       7       0.0        0.0              0        11.648429   \n",
      "2  45.0       8       1.0        1.0              0        10.923376   \n",
      "3  25.0       0       1.0        1.0              0        12.020244   \n",
      "4  39.0       2       1.0        0.0              1         0.000000   \n",
      "\n",
      "   estimated_salary_log  \n",
      "0             11.121710  \n",
      "1             12.116142  \n",
      "2             12.045548  \n",
      "3             12.022615  \n",
      "4             11.320892  \n"
     ]
    }
   ],
   "source": [
    "for frame in (X_train, X_test):\n",
    "    frame[\"zero_bal_flag\"] = (frame[\"acc_balance\"] == 0).astype(int)\n",
    "\n",
    "upper_cap = X_train.loc[\n",
    "    X_train[\"acc_balance\"] > 0,\n",
    "    \"acc_balance\"\n",
    "].quantile(0.995)\n",
    "for frame in (X_train, X_test):\n",
    "    frame[\"acc_balance\"] = frame[\"acc_balance\"].clip(upper=upper_cap)\n",
    "\n",
    "low_cut = X_train[\"estimated_salary\"].quantile(0.01)\n",
    "\n",
    "for frame in (X_train, X_test):\n",
    "    frame[\"estimated_salary\"] = frame[\"estimated_salary\"].clip(lower=low_cut)\n",
    "\n",
    "for frame in (X_train, X_test):\n",
    "    frame[\"acc_balance_log\"]      = np.log1p(frame[\"acc_balance\"])\n",
    "    frame[\"estimated_salary_log\"] = np.log1p(frame[\"estimated_salary\"])\n",
    "\n",
    "cols_to_drop = [\"acc_balance\", \"estimated_salary\"]      # keep logs + flag\n",
    "X_train = X_train.drop(columns=cols_to_drop)\n",
    "X_test  = X_test.drop(columns=cols_to_drop)\n",
    "\n",
    "print(X_train.head())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79cb0471",
   "metadata": {
    "papermill": {
     "duration": 0.00888,
     "end_time": "2025-07-15T14:26:49.690579",
     "exception": false,
     "start_time": "2025-07-15T14:26:49.681699",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e130e940",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:49.709927Z",
     "iopub.status.busy": "2025-07-15T14:26:49.709630Z",
     "iopub.status.idle": "2025-07-15T14:26:49.741069Z",
     "shell.execute_reply": "2025-07-15T14:26:49.740234Z"
    },
    "papermill": {
     "duration": 0.043073,
     "end_time": "2025-07-15T14:26:49.742743",
     "exception": false,
     "start_time": "2025-07-15T14:26:49.699670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_plot = pd.concat([X_train.copy(), y_train.reset_index(drop=True)], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e9d21dca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:49.762581Z",
     "iopub.status.busy": "2025-07-15T14:26:49.762221Z",
     "iopub.status.idle": "2025-07-15T14:26:50.002068Z",
     "shell.execute_reply": "2025-07-15T14:26:50.001138Z"
    },
    "papermill": {
     "duration": 0.251609,
     "end_time": "2025-07-15T14:26:50.003679",
     "exception": false,
     "start_time": "2025-07-15T14:26:49.752070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1st\n",
    "plt.figure()\n",
    "plt.hist(df_plot[\"acc_balance_log\"], bins=50)\n",
    "plt.title(\"Distribution of logₑ(1 + Account Balance)\")\n",
    "plt.xlabel(\"logₑ(1 + balance)\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9ce9b176",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:50.024754Z",
     "iopub.status.busy": "2025-07-15T14:26:50.024433Z",
     "iopub.status.idle": "2025-07-15T14:26:50.202711Z",
     "shell.execute_reply": "2025-07-15T14:26:50.201657Z"
    },
    "papermill": {
     "duration": 0.190536,
     "end_time": "2025-07-15T14:26:50.204310",
     "exception": false,
     "start_time": "2025-07-15T14:26:50.013774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 2\n",
    "plt.figure()\n",
    "statuses = sorted(df_plot[\"exit_status\"].unique())\n",
    "data_box = [df_plot[df_plot[\"exit_status\"] == s][\"estimated_salary_log\"]\n",
    "            for s in statuses]\n",
    "plt.boxplot(data_box, labels=[f\"Churn={s}\" for s in statuses])\n",
    "plt.title(\"logₑ(1 + Estimated Salary) by Exit Status\")\n",
    "plt.ylabel(\"logₑ(1 + salary)\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "35e1e8bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:50.227155Z",
     "iopub.status.busy": "2025-07-15T14:26:50.226821Z",
     "iopub.status.idle": "2025-07-15T14:26:50.389577Z",
     "shell.execute_reply": "2025-07-15T14:26:50.388570Z"
    },
    "papermill": {
     "duration": 0.175844,
     "end_time": "2025-07-15T14:26:50.391132",
     "exception": false,
     "start_time": "2025-07-15T14:26:50.215288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3\n",
    "\n",
    "grouped = df_plot.groupby(\"zero_bal_flag\")[\"exit_status\"].mean()\n",
    "plt.figure()\n",
    "plt.bar(grouped.index.astype(str), grouped.values)\n",
    "plt.title(\"Churn Rate vs. Zero‑Balance Accounts\")\n",
    "plt.xlabel(\"Zero Balance Flag (0 = Non‑Zero, 1 = Zero)\")\n",
    "plt.ylabel(\"Mean Exit Status (Churn Rate)\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1053e057",
   "metadata": {
    "papermill": {
     "duration": 0.010277,
     "end_time": "2025-07-15T14:26:50.412301",
     "exception": false,
     "start_time": "2025-07-15T14:26:50.402024",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Encoding and Scaling "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "09110972",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:50.434903Z",
     "iopub.status.busy": "2025-07-15T14:26:50.434590Z",
     "iopub.status.idle": "2025-07-15T14:26:50.622538Z",
     "shell.execute_reply": "2025-07-15T14:26:50.621655Z"
    },
    "papermill": {
     "duration": 0.201177,
     "end_time": "2025-07-15T14:26:50.624167",
     "exception": false,
     "start_time": "2025-07-15T14:26:50.422990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "\n",
    "numeric_scale_cols = [\n",
    "    \"credit_score\",\n",
    "    \"acc_balance_log\",\n",
    "    \"estimated_salary_log\",\n",
    "    \"age\",\n",
    "    \"tenure\"\n",
    "]\n",
    "\n",
    "numeric_passthrough = [\n",
    "    \"prod_count\",\n",
    "    \"zero_bal_flag\"\n",
    "]\n",
    "\n",
    "categorical_cols = [\n",
    "    \"country\",\n",
    "    \"gender\"\n",
    "]\n",
    "\n",
    "enc_scale = ColumnTransformer(\n",
    "    transformers=[\n",
    "        (\"num_scale\", StandardScaler(), numeric_scale_cols),\n",
    "        (\"cat_onehot\", OneHotEncoder(handle_unknown=\"ignore\",  sparse_output=False), categorical_cols),\n",
    "        (\"num_pass\", \"passthrough\", numeric_passthrough)\n",
    "    ],\n",
    "    remainder=\"drop\",\n",
    "    verbose_feature_names_out=False\n",
    ").set_output(transform=\"pandas\")\n",
    "\n",
    "enc_scale.fit(X_train)\n",
    "\n",
    "X_train_fe = enc_scale.transform(X_train)\n",
    "X_test_fe  = enc_scale.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb698b8e",
   "metadata": {
    "papermill": {
     "duration": 0.010653,
     "end_time": "2025-07-15T14:26:50.646234",
     "exception": false,
     "start_time": "2025-07-15T14:26:50.635581",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Models\n",
    "\n",
    "1. Elastic Net\n",
    "2. Random Forest\n",
    "3. GradientBoost Classifier\n",
    "4. XGBoost Classifier\n",
    "5. LightGBM\n",
    "6. CatBoostClassifier\n",
    "7. MultiLayerPerceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "36262df6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:26:50.669803Z",
     "iopub.status.busy": "2025-07-15T14:26:50.669495Z",
     "iopub.status.idle": "2025-07-15T14:32:51.609626Z",
     "shell.execute_reply": "2025-07-15T14:32:51.608634Z"
    },
    "papermill": {
     "duration": 360.964659,
     "end_time": "2025-07-15T14:32:51.621723",
     "exception": false,
     "start_time": "2025-07-15T14:26:50.657064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogReg  CV‑AUC = 0.7935\n",
      "RF     CV‑AUC = 0.8569\n",
      "GB     CV‑AUC = 0.8684\n",
      "XGB    CV‑AUC = 0.8690\n",
      "LGBM   CV‑AUC = 0.8677\n",
      "Cat    CV‑AUC = 0.8689\n",
      "MLP    CV‑AUC = 0.8617\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score, StratifiedKFold\n",
    "from sklearn.linear_model     import LogisticRegression\n",
    "from sklearn.ensemble         import RandomForestClassifier, GradientBoostingClassifier\n",
    "from sklearn.neural_network   import MLPClassifier\n",
    "\n",
    "from xgboost       import XGBClassifier\n",
    "from lightgbm      import LGBMClassifier\n",
    "from catboost      import CatBoostClassifier\n",
    "\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "pipelines = {\n",
    "    # 1\n",
    "    \"LogReg\": Pipeline([\n",
    "        (\"prep\", enc_scale),\n",
    "        (\"clf\", LogisticRegression(\n",
    "            penalty         = \"elasticnet\",\n",
    "            solver          = \"saga\",\n",
    "            l1_ratio        = 0.5,\n",
    "            C               = 1.0,\n",
    "            max_iter        = 1000,\n",
    "            class_weight    = \"balanced\",\n",
    "            n_jobs          = -1,\n",
    "            random_state    = 42))\n",
    "    ]),\n",
    "\n",
    "    # 2\n",
    "    \"RF\": Pipeline([\n",
    "        (\"prep\", enc_scale),\n",
    "        (\"clf\", RandomForestClassifier(\n",
    "            n_estimators    = 400,\n",
    "            max_depth       = None,\n",
    "            min_samples_leaf= 2,\n",
    "            n_jobs          = -1,\n",
    "            class_weight    = \"balanced\",\n",
    "            random_state    = 42))\n",
    "    ]),\n",
    "\n",
    "    # 3\n",
    "    \"GB\": Pipeline([\n",
    "        (\"prep\", enc_scale),\n",
    "        (\"clf\", GradientBoostingClassifier(\n",
    "            n_estimators    = 300,\n",
    "            learning_rate   = 0.05,\n",
    "            max_depth       = 3,\n",
    "            subsample       = 0.8,\n",
    "            random_state    = 42))\n",
    "    ]),\n",
    "\n",
    "    # 4\n",
    "    \"XGB\": Pipeline([\n",
    "        (\"prep\", enc_scale),\n",
    "        (\"clf\", XGBClassifier(\n",
    "            n_estimators    = 400,\n",
    "            eta             = 0.05,\n",
    "            max_depth       = 4,\n",
    "            subsample       = 0.8,\n",
    "            colsample_bytree= 0.8,\n",
    "            eval_metric     = \"logloss\",\n",
    "            scale_pos_weight= 1.0,\n",
    "            n_jobs          = -1,\n",
    "            random_state    = 42,\n",
    "            use_label_encoder=False))\n",
    "    ]),\n",
    "\n",
    "    # 5\n",
    "    \"LGBM\": Pipeline([\n",
    "        (\"prep\", enc_scale),\n",
    "        (\"clf\", LGBMClassifier(\n",
    "            n_estimators    = 400,\n",
    "            learning_rate   = 0.05,\n",
    "            num_leaves      = 31,\n",
    "            subsample       = 0.8,\n",
    "            colsample_bytree= 0.8,\n",
    "            class_weight    = \"balanced\",\n",
    "            random_state    = 42))\n",
    "    ]),\n",
    "\n",
    "    # 6\n",
    "    \"Cat\": Pipeline([\n",
    "        (\"prep\", enc_scale),\n",
    "        (\"clf\", CatBoostClassifier(\n",
    "            iterations      = 400,\n",
    "            depth           = 5,\n",
    "            learning_rate   = 0.05,\n",
    "            l2_leaf_reg     = 3.0,\n",
    "            loss_function   = \"Logloss\",\n",
    "            verbose         = False,\n",
    "            random_state    = 42,\n",
    "            class_weights   = [1.0, 1.0]))  # adjust if churn is imbalanced\n",
    "    ]),\n",
    "\n",
    "    # 7\n",
    "    \"MLP\": Pipeline([\n",
    "        (\"prep\", enc_scale),\n",
    "        (\"clf\", MLPClassifier(\n",
    "            hidden_layer_sizes=(64, 32),\n",
    "            activation       = \"relu\",\n",
    "            alpha            = 1e-4,\n",
    "            learning_rate_init= 1e-3,\n",
    "            max_iter         = 200,\n",
    "            random_state     = 42))\n",
    "    ])\n",
    "}\n",
    "\n",
    "cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "for name, pipe in pipelines.items():\n",
    "    auc = cross_val_score(pipe, X_train, y_train,\n",
    "                          cv=cv, scoring=\"roc_auc\", n_jobs=-1).mean()\n",
    "    print(f\"{name:5}  CV‑AUC = {auc:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95c251da",
   "metadata": {
    "papermill": {
     "duration": 0.010827,
     "end_time": "2025-07-15T14:32:51.643207",
     "exception": false,
     "start_time": "2025-07-15T14:32:51.632380",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "33a86c68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:32:51.666327Z",
     "iopub.status.busy": "2025-07-15T14:32:51.665597Z",
     "iopub.status.idle": "2025-07-15T14:36:02.318002Z",
     "shell.execute_reply": "2025-07-15T14:36:02.317068Z"
    },
    "papermill": {
     "duration": 190.676335,
     "end_time": "2025-07-15T14:36:02.330035",
     "exception": false,
     "start_time": "2025-07-15T14:32:51.653700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "  Tuning XGB\n",
      "n_iterations: 3\n",
      "n_required_iterations: 3\n",
      "n_possible_iterations: 3\n",
      "min_resources_: 50\n",
      "max_resources_: 500\n",
      "aggressive_elimination: False\n",
      "factor: 3\n",
      "----------\n",
      "iter: 0\n",
      "n_candidates: 10\n",
      "n_resources: 50\n",
      "Fitting 3 folds for each of 10 candidates, totalling 30 fits\n",
      "----------\n",
      "iter: 1\n",
      "n_candidates: 4\n",
      "n_resources: 150\n",
      "Fitting 3 folds for each of 4 candidates, totalling 12 fits\n",
      "----------\n",
      "iter: 2\n",
      "n_candidates: 2\n",
      "n_resources: 450\n",
      "Fitting 3 folds for each of 2 candidates, totalling 6 fits\n",
      "Best XGB AUC: 0.8674\n",
      "\n",
      "  Tuning Cat\n",
      "n_iterations: 2\n",
      "n_required_iterations: 2\n",
      "n_possible_iterations: 2\n",
      "min_resources_: 100\n",
      "max_resources_: 600\n",
      "aggressive_elimination: False\n",
      "factor: 3\n",
      "----------\n",
      "iter: 0\n",
      "n_candidates: 6\n",
      "n_resources: 100\n",
      "Fitting 3 folds for each of 6 candidates, totalling 18 fits\n",
      "----------\n",
      "iter: 1\n",
      "n_candidates: 2\n",
      "n_resources: 300\n",
      "Fitting 3 folds for each of 2 candidates, totalling 6 fits\n",
      "Best Cat AUC: 0.8687\n",
      "\n",
      "  Tuning GB\n",
      "n_iterations: 2\n",
      "n_required_iterations: 2\n",
      "n_possible_iterations: 2\n",
      "min_resources_: 50\n",
      "max_resources_: 400\n",
      "aggressive_elimination: False\n",
      "factor: 3\n",
      "----------\n",
      "iter: 0\n",
      "n_candidates: 8\n",
      "n_resources: 50\n",
      "Fitting 3 folds for each of 8 candidates, totalling 24 fits\n",
      "----------\n",
      "iter: 1\n",
      "n_candidates: 3\n",
      "n_resources: 150\n",
      "Fitting 3 folds for each of 3 candidates, totalling 9 fits\n",
      "Best GB AUC: 0.8682\n"
     ]
    }
   ],
   "source": [
    "from sklearn.experimental import enable_halving_search_cv\n",
    "from sklearn.model_selection import StratifiedKFold, HalvingRandomSearchCV\n",
    "from sklearn.pipeline import Pipeline\n",
    "from scipy.stats import randint, uniform, loguniform\n",
    "from xgboost   import XGBClassifier\n",
    "from catboost  import CatBoostClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "\n",
    "cv3 = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n",
    "scorer = \"roc_auc\"\n",
    "\n",
    "# 1st\n",
    "xgb_pipe = Pipeline([\n",
    "    (\"prep\", enc_scale),\n",
    "    (\"clf\", XGBClassifier(\n",
    "        n_estimators = 50,\n",
    "        tree_method = \"hist\",\n",
    "        eval_metric = \"logloss\",\n",
    "        n_jobs      = -1,\n",
    "        random_state= 42,\n",
    "        use_label_encoder=False\n",
    "    ))\n",
    "])\n",
    "\n",
    "xgb_param_dist = {\n",
    "    \"clf__learning_rate\":   loguniform(0.01, 0.1),\n",
    "    \"clf__max_depth\":       randint(3, 6),\n",
    "    \"clf__subsample\":       uniform(0.7, 0.3),\n",
    "    \"clf__colsample_bytree\": uniform(0.7, 0.3),\n",
    "}\n",
    "\n",
    "xgb_search = HalvingRandomSearchCV(\n",
    "    estimator      = xgb_pipe,\n",
    "    param_distributions = xgb_param_dist,\n",
    "    factor         = 3,\n",
    "    resource       = \"clf__n_estimators\",\n",
    "    max_resources  = 500,\n",
    "    min_resources  = 50,\n",
    "    scoring        = \"roc_auc\",\n",
    "    cv             = cv3,\n",
    "    n_jobs         = -1,\n",
    "    random_state   = 42,\n",
    "    verbose        = 1\n",
    ")\n",
    "# 2nd\n",
    "cat_pipe = Pipeline([\n",
    "    (\"prep\", enc_scale),\n",
    "    (\"clf\", CatBoostClassifier(\n",
    "        iterations   = 100,\n",
    "        loss_function=\"Logloss\",\n",
    "        verbose      = False,\n",
    "        random_state = 42,\n",
    "        task_type    = \"CPU\"\n",
    "    ))\n",
    "])\n",
    "\n",
    "cat_param_dist = {\n",
    "    \"clf__depth\":         randint(4, 8),\n",
    "    \"clf__learning_rate\": loguniform(0.02, 0.1),\n",
    "    \"clf__l2_leaf_reg\":   loguniform(1, 10),\n",
    "    \"clf__subsample\":     uniform(0.6, 0.4)\n",
    "}\n",
    "\n",
    "cat_search = HalvingRandomSearchCV(\n",
    "    cat_pipe, cat_param_dist,\n",
    "    factor        = 3,\n",
    "    resource      = \"clf__iterations\",\n",
    "    max_resources = 600,\n",
    "    min_resources = 100,\n",
    "    scoring       = \"roc_auc\",\n",
    "    cv            = cv3,\n",
    "    n_jobs        = -1,\n",
    "    random_state  = 42,\n",
    "    verbose       = 1\n",
    ")\n",
    "\n",
    "# 3rd\n",
    "gb_pipe = Pipeline([\n",
    "    (\"prep\", enc_scale),\n",
    "    (\"clf\", GradientBoostingClassifier(\n",
    "        n_estimators = 50,\n",
    "        random_state = 42\n",
    "    ))\n",
    "])\n",
    "\n",
    "gb_param_dist = {\n",
    "    \"clf__learning_rate\": loguniform(0.03, 0.15),\n",
    "    \"clf__max_depth\":     randint(2, 5)\n",
    "}\n",
    "\n",
    "gb_search = HalvingRandomSearchCV(\n",
    "    gb_pipe, gb_param_dist,\n",
    "    factor        = 3,\n",
    "    resource      = \"clf__n_estimators\",\n",
    "    max_resources = 400,\n",
    "    min_resources = 50,\n",
    "    scoring       = \"roc_auc\",\n",
    "    cv            = cv3,\n",
    "    n_jobs        = -1,\n",
    "    random_state  = 42,\n",
    "    verbose       = 1\n",
    ")\n",
    "\n",
    "# performing search\n",
    "searches = [(\"XGB\", xgb_search), (\"Cat\", cat_search), (\"GB\", gb_search)]\n",
    "\n",
    "for name, search in [(\"XGB\", xgb_search), (\"Cat\", cat_search), (\"GB\", gb_search)]:\n",
    "    print(f\"\\n  Tuning {name}\")\n",
    "    search.fit(X_train, y_train)\n",
    "    print(f\"Best {name} AUC: {search.best_score_:.4f}\")\n",
    "\n",
    "best_xgb = xgb_search.best_estimator_\n",
    "best_cat = cat_search.best_estimator_\n",
    "best_gb  = gb_search.best_estimator_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "063ebd62",
   "metadata": {
    "papermill": {
     "duration": 0.010738,
     "end_time": "2025-07-15T14:36:02.352059",
     "exception": false,
     "start_time": "2025-07-15T14:36:02.341321",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Choosing the best model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "dd594c45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:36:02.375648Z",
     "iopub.status.busy": "2025-07-15T14:36:02.375315Z",
     "iopub.status.idle": "2025-07-15T14:36:08.352024Z",
     "shell.execute_reply": "2025-07-15T14:36:08.351150Z"
    },
    "papermill": {
     "duration": 5.990305,
     "end_time": "2025-07-15T14:36:08.353626",
     "exception": false,
     "start_time": "2025-07-15T14:36:02.363321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;prep&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;num_scale&#x27;, StandardScaler(),\n",
       "                                                  [&#x27;credit_score&#x27;,\n",
       "                                                   &#x27;acc_balance_log&#x27;,\n",
       "                                                   &#x27;estimated_salary_log&#x27;,\n",
       "                                                   &#x27;age&#x27;, &#x27;tenure&#x27;]),\n",
       "                                                 (&#x27;cat_onehot&#x27;,\n",
       "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n",
       "                                                                sparse_output=False),\n",
       "                                                  [&#x27;country&#x27;, &#x27;gender&#x27;]),\n",
       "                                                 (&#x27;num_pass&#x27;, &#x27;passthrough&#x27;,\n",
       "                                                  [&#x27;prod_count&#x27;,\n",
       "                                                   &#x27;zero_bal_flag&#x27;])],\n",
       "                                   verbose_feature_names_out=False)),\n",
       "                (&#x27;...\n",
       "                               eval_metric=&#x27;logloss&#x27;, feature_types=None,\n",
       "                               gamma=None, grow_policy=None,\n",
       "                               importance_type=None,\n",
       "                               interaction_constraints=None, learning_rate=None,\n",
       "                               max_bin=None, max_cat_threshold=None,\n",
       "                               max_cat_to_onehot=None, max_delta_step=None,\n",
       "                               max_depth=4, max_leaves=None,\n",
       "                               min_child_weight=None, missing=nan,\n",
       "                               monotone_constraints=None, multi_strategy=None,\n",
       "                               n_estimators=400, n_jobs=-1,\n",
       "                               num_parallel_tree=None, ...))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;prep&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;num_scale&#x27;, StandardScaler(),\n",
       "                                                  [&#x27;credit_score&#x27;,\n",
       "                                                   &#x27;acc_balance_log&#x27;,\n",
       "                                                   &#x27;estimated_salary_log&#x27;,\n",
       "                                                   &#x27;age&#x27;, &#x27;tenure&#x27;]),\n",
       "                                                 (&#x27;cat_onehot&#x27;,\n",
       "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n",
       "                                                                sparse_output=False),\n",
       "                                                  [&#x27;country&#x27;, &#x27;gender&#x27;]),\n",
       "                                                 (&#x27;num_pass&#x27;, &#x27;passthrough&#x27;,\n",
       "                                                  [&#x27;prod_count&#x27;,\n",
       "                                                   &#x27;zero_bal_flag&#x27;])],\n",
       "                                   verbose_feature_names_out=False)),\n",
       "                (&#x27;...\n",
       "                               eval_metric=&#x27;logloss&#x27;, feature_types=None,\n",
       "                               gamma=None, grow_policy=None,\n",
       "                               importance_type=None,\n",
       "                               interaction_constraints=None, learning_rate=None,\n",
       "                               max_bin=None, max_cat_threshold=None,\n",
       "                               max_cat_to_onehot=None, max_delta_step=None,\n",
       "                               max_depth=4, max_leaves=None,\n",
       "                               min_child_weight=None, missing=nan,\n",
       "                               monotone_constraints=None, multi_strategy=None,\n",
       "                               n_estimators=400, n_jobs=-1,\n",
       "                               num_parallel_tree=None, ...))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">prep: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num_scale&#x27;, StandardScaler(),\n",
       "                                 [&#x27;credit_score&#x27;, &#x27;acc_balance_log&#x27;,\n",
       "                                  &#x27;estimated_salary_log&#x27;, &#x27;age&#x27;, &#x27;tenure&#x27;]),\n",
       "                                (&#x27;cat_onehot&#x27;,\n",
       "                                 OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n",
       "                                               sparse_output=False),\n",
       "                                 [&#x27;country&#x27;, &#x27;gender&#x27;]),\n",
       "                                (&#x27;num_pass&#x27;, &#x27;passthrough&#x27;,\n",
       "                                 [&#x27;prod_count&#x27;, &#x27;zero_bal_flag&#x27;])],\n",
       "                  verbose_feature_names_out=False)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num_scale</label><div class=\"sk-toggleable__content\"><pre>[&#x27;credit_score&#x27;, &#x27;acc_balance_log&#x27;, &#x27;estimated_salary_log&#x27;, &#x27;age&#x27;, &#x27;tenure&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat_onehot</label><div class=\"sk-toggleable__content\"><pre>[&#x27;country&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num_pass</label><div class=\"sk-toggleable__content\"><pre>[&#x27;prod_count&#x27;, &#x27;zero_bal_flag&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.8, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eta=0.05, eval_metric=&#x27;logloss&#x27;,\n",
       "              feature_types=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=4,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=400,\n",
       "              n_jobs=-1, num_parallel_tree=None, ...)</pre></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('prep',\n",
       "                 ColumnTransformer(transformers=[('num_scale', StandardScaler(),\n",
       "                                                  ['credit_score',\n",
       "                                                   'acc_balance_log',\n",
       "                                                   'estimated_salary_log',\n",
       "                                                   'age', 'tenure']),\n",
       "                                                 ('cat_onehot',\n",
       "                                                  OneHotEncoder(handle_unknown='ignore',\n",
       "                                                                sparse_output=False),\n",
       "                                                  ['country', 'gender']),\n",
       "                                                 ('num_pass', 'passthrough',\n",
       "                                                  ['prod_count',\n",
       "                                                   'zero_bal_flag'])],\n",
       "                                   verbose_feature_names_out=False)),\n",
       "                ('...\n",
       "                               eval_metric='logloss', feature_types=None,\n",
       "                               gamma=None, grow_policy=None,\n",
       "                               importance_type=None,\n",
       "                               interaction_constraints=None, learning_rate=None,\n",
       "                               max_bin=None, max_cat_threshold=None,\n",
       "                               max_cat_to_onehot=None, max_delta_step=None,\n",
       "                               max_depth=4, max_leaves=None,\n",
       "                               min_child_weight=None, missing=nan,\n",
       "                               monotone_constraints=None, multi_strategy=None,\n",
       "                               n_estimators=400, n_jobs=-1,\n",
       "                               num_parallel_tree=None, ...))])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import cross_val_score, StratifiedKFold\n",
    "\n",
    "baseline_xgb = Pipeline([\n",
    "        (\"prep\", enc_scale),\n",
    "        (\"clf\", XGBClassifier(\n",
    "            n_estimators    = 400,\n",
    "            eta             = 0.05,\n",
    "            max_depth       = 4,\n",
    "            subsample       = 0.8,\n",
    "            colsample_bytree= 0.8,\n",
    "            eval_metric     = \"logloss\",\n",
    "            scale_pos_weight= 1.0,\n",
    "            n_jobs          = -1,\n",
    "            random_state    = 42,\n",
    "            use_label_encoder=False))\n",
    "    ])\n",
    "\n",
    "cv3 = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n",
    "auc = cross_val_score(baseline_xgb, X_train, y_train,\n",
    "                      scoring=\"roc_auc\", cv=cv3, n_jobs=-1).mean()\n",
    "\n",
    "final_xgb = pipelines[\"XGB\"]      # reuse the exact pipeline you defined\n",
    "final_xgb.fit(X_train, y_train)\n",
    "\n",
    "final_xgb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4baf210d",
   "metadata": {
    "papermill": {
     "duration": 0.012655,
     "end_time": "2025-07-15T14:36:08.378583",
     "exception": false,
     "start_time": "2025-07-15T14:36:08.365928",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Comparing models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "34945cd7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:36:08.402533Z",
     "iopub.status.busy": "2025-07-15T14:36:08.402226Z",
     "iopub.status.idle": "2025-07-15T14:36:08.557128Z",
     "shell.execute_reply": "2025-07-15T14:36:08.556288Z"
    },
    "papermill": {
     "duration": 0.169094,
     "end_time": "2025-07-15T14:36:08.558925",
     "exception": false,
     "start_time": "2025-07-15T14:36:08.389831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "results = {\n",
    "    'LogReg': 0.7935,\n",
    "    'RF'     : 0.8569,\n",
    "    'GB'     : 0.8684,\n",
    "    'XGB'    : 0.8690,\n",
    "    'LGBM'   : 0.8677,\n",
    "    'Cat'    : 0.8689,\n",
    "    'MLP'    : 0.8617\n",
    "}\n",
    "\n",
    "sns.barplot(x=list(results.keys()), y=list(results.values()))\n",
    "plt.ylabel(\"R² Score\");\n",
    "plt.xticks(rotation=45);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7ef0764a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-15T14:36:08.584900Z",
     "iopub.status.busy": "2025-07-15T14:36:08.584578Z",
     "iopub.status.idle": "2025-07-15T14:36:08.735021Z",
     "shell.execute_reply": "2025-07-15T14:36:08.734289Z"
    },
    "papermill": {
     "duration": 0.165148,
     "end_time": "2025-07-15T14:36:08.736653",
     "exception": false,
     "start_time": "2025-07-15T14:36:08.571505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Final submission\n",
    "\n",
    "test_pred = final_xgb.predict_proba(X_test)[:, 1]\n",
    "\n",
    "submission = pd.DataFrame({\n",
    "    \"id\": X_test[\"id\"],\n",
    "    \"exit_status\": test_pred\n",
    "})\n",
    "\n",
    "submission.to_csv(\"submission.csv\", index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13009703,
     "sourceId": 107399,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 573.379085,
   "end_time": "2025-07-15T14:36:11.370662",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-15T14:26:37.991577",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
